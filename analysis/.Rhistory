load("C:/Users/vayze/Desktop/GitHub_Repos/ginn/analysis/face_data.RData")
View(basic_acc)
View(all_subs)
View(all_subs)
View(all_subs)
subs = unique(all_subs$participant)
ss = 1086
curr_sub = compiled_subs[compiled_subs$participant == ss]
compiled_subs = all_subs
curr_sub = compiled_subs[compiled_subs$participant == ss]
curr_sub = compiled_subs[compiled_subs$participant == ss,]
subs = unique(all_subs$participant)
all_subs = NULL
for (ss in subs){
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(newpart$key_resp.rt), center = TRUE, scale =TRUE)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
subs = unique(all_subs$participant)
all_subs = NULL
for (ss in subs){
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
subs = unique(all_subs$participant)
all_subs = NULL
for (ss in subs){
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
View(curr_sub)
subs = unique(all_subs$participant)
all_subs = NULL
for (ss in subs){
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
#curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
View(curr_sub)
scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
View(curr_sub)
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
View(curr_sub)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
View(curr_sub)
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
subs = unique(all_subs$participant)
all_subs = NULL
for (ss in subs){
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
subs = unique(all_subs$participant)
all_subs = NULL
for (ss in subs){
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
subs = unique(all_subs$participant)
all_subs = NULL
for (ss in subs){
print(ss)
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
subs = unique(compiled_subs$participant)
all_subs = NULL
for (ss in subs){
print(ss)
curr_sub = compiled_subs[compiled_subs$participant == ss,]
curr_sub$rt_stand =scale(as.numeric(curr_sub$key_resp.rt), center = TRUE, scale =TRUE)
curr_sub$rt_stand[abs(curr_sub$rt_stand) >= 2.5] = NA
all_subs = rbind(all_subs, curr_sub) #combine into one big dataframe
}
View(all_subs)
# creating the matrix and looping through to match pics
basic_acc = matrix(0, nrow(im_pair),5)
for (qq in 1:nrow(im_pair)){                                                       # if the image pair is the same as in the participant sheet,
#assigning the first 2 columns to be stims 1 and 2
basic_acc[qq,1] = im_pair$IM1[qq]
basic_acc[qq,2] = im_pair$IM2[qq]
# assigning 3rd to be acc, as long as pic from long dataframe is same as pic from face_pairs.csv
# AND as long as the 2 images arent the save
basic_acc[qq,3] = mean(all_subs$key_resp.corr[which(all_subs$stim1 ==
im_pair$IM1[qq] & all_subs$stim2 == im_pair$IM2[qq] |
all_subs$stim2 == im_pair$IM1[qq] &
all_subs$stim1 == im_pair$IM2[qq])], na.rm = TRUE)
# same thing u just did for acc but for rt
basic_acc[qq,4] = mean(all_subs$key_resp.rt[which(all_subs$stim1 ==
im_pair$IM1[qq] & all_subs$stim2 == im_pair$IM2[qq] |
all_subs$stim2 == im_pair$IM1[qq] &
all_subs$stim1 == im_pair$IM2[qq])], na.rm = TRUE)
basic_acc = as.data.frame(basic_acc)
#### same thing but for standardized rxn time
basic_acc[qq,5] = mean(all_subs$rt_stand[which(all_subs$stim1 ==
im_pair$IM1[qq] & all_subs$stim2 == im_pair$IM2[qq] |
all_subs$stim2 == im_pair$IM1[qq] &
all_subs$stim1 == im_pair$IM2[qq])], na.rm = TRUE)
colnames(basic_acc) = c('stim1', 'stim2', 'acc', 'resp_time','standardrt')             #column & row names
basic_acc$acc = as.numeric(basic_acc$acc)
basic_acc$resp_time = as.numeric(basic_acc$resp_time)
basic_acc$standardrt = as.numeric(basic_acc$standardrt)
}
